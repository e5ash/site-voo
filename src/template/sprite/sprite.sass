// SASS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home
//   width: $icon-home-width
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites
$crest-name: 'crest'
$crest-x: 0px
$crest-y: 0px
$crest-offset-x: 0px
$crest-offset-y: 0px
$crest-width: 138px
$crest-height: 100px
$crest-total-width: 189px
$crest-total-height: 130px
$crest-image: 'sprite.png'
$crest: (0px, 0px, 0px, 0px, 138px, 100px, 189px, 130px, 'sprite.png', 'crest', )
$facebook-name: 'facebook'
$facebook-x: 138px
$facebook-y: 51px
$facebook-offset-x: -138px
$facebook-offset-y: -51px
$facebook-width: 31px
$facebook-height: 31px
$facebook-total-width: 189px
$facebook-total-height: 130px
$facebook-image: 'sprite.png'
$facebook: (138px, 51px, -138px, -51px, 31px, 31px, 189px, 130px, 'sprite.png', 'facebook', )
$heart-name: 'heart'
$heart-x: 138px
$heart-y: 0px
$heart-offset-x: -138px
$heart-offset-y: 0px
$heart-width: 51px
$heart-height: 51px
$heart-total-width: 189px
$heart-total-height: 130px
$heart-image: 'sprite.png'
$heart: (138px, 0px, -138px, 0px, 51px, 51px, 189px, 130px, 'sprite.png', 'heart', )
$instagram-name: 'instagram'
$instagram-x: 0px
$instagram-y: 100px
$instagram-offset-x: 0px
$instagram-offset-y: -100px
$instagram-width: 31px
$instagram-height: 30px
$instagram-total-width: 189px
$instagram-total-height: 130px
$instagram-image: 'sprite.png'
$instagram: (0px, 100px, 0px, -100px, 31px, 30px, 189px, 130px, 'sprite.png', 'instagram', )
$linkedin-name: 'linkedin'
$linkedin-x: 31px
$linkedin-y: 100px
$linkedin-offset-x: -31px
$linkedin-offset-y: -100px
$linkedin-width: 31px
$linkedin-height: 30px
$linkedin-total-width: 189px
$linkedin-total-height: 130px
$linkedin-image: 'sprite.png'
$linkedin: (31px, 100px, -31px, -100px, 31px, 30px, 189px, 130px, 'sprite.png', 'linkedin', )
$metro-name: 'metro'
$metro-x: 138px
$metro-y: 82px
$metro-offset-x: -138px
$metro-offset-y: -82px
$metro-width: 25px
$metro-height: 16px
$metro-total-width: 189px
$metro-total-height: 130px
$metro-image: 'sprite.png'
$metro: (138px, 82px, -138px, -82px, 25px, 16px, 189px, 130px, 'sprite.png', 'metro', )
$twitter-name: 'twitter'
$twitter-x: 62px
$twitter-y: 100px
$twitter-offset-x: -62px
$twitter-offset-y: -100px
$twitter-width: 31px
$twitter-height: 30px
$twitter-total-width: 189px
$twitter-total-height: 130px
$twitter-image: 'sprite.png'
$twitter: (62px, 100px, -62px, -100px, 31px, 30px, 189px, 130px, 'sprite.png', 'twitter', )
$youtube-name: 'youtube'
$youtube-x: 93px
$youtube-y: 100px
$youtube-offset-x: -93px
$youtube-offset-y: -100px
$youtube-width: 31px
$youtube-height: 30px
$youtube-total-width: 189px
$youtube-total-height: 130px
$youtube-image: 'sprite.png'
$youtube: (93px, 100px, -93px, -100px, 31px, 30px, 189px, 130px, 'sprite.png', 'youtube', )
$spritesheet-width: 189px
$spritesheet-height: 130px
$spritesheet-image: 'sprite.png'
$spritesheet-sprites: ($crest, $facebook, $heart, $instagram, $linkedin, $metro, $twitter, $youtube, )
$spritesheet: (189px, 130px, 'sprite.png', $spritesheet-sprites, )

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home
//   @include sprite-width($icon-home)
//
// .icon-email
//   @include sprite($icon-email)
//
// Example usage in HTML:
//   `display: block` sprite:
//   <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//   // CSS
//   .icon {
//     display: inline-block;
//   }
//
//   // HTML
//   <i class="icon icon-home"></i>
@mixin sprite-width($sprite)
  width: nth($sprite, 5)

@mixin sprite-height($sprite)
  height: nth($sprite, 6)

@mixin sprite-position($sprite)
  $sprite-offset-x: nth($sprite, 3)
  $sprite-offset-y: nth($sprite, 4)
  background-position: $sprite-offset-x  $sprite-offset-y

@mixin sprite-image($sprite)
  $sprite-image: nth($sprite, 9)
  background-image: url(#{$sprite-image})

@mixin sprite($sprite)
  @include sprite-image($sprite)
  @include sprite-position($sprite)
  @include sprite-width($sprite)
  @include sprite-height($sprite)

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SASS
//
// @include sprites($spritesheet-sprites)
@mixin sprites($sprites)
  @each $sprite in $sprites
    $sprite-name: nth($sprite, 10)
    .#{$sprite-name}
      @include sprite($sprite)
